using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using MvCamCtrl;
using MvCamCtrl.NET;
using System.Threading;
using System.Runtime.InteropServices;
using System.Text.RegularExpressions;
using System.Drawing.Imaging;
using System.IO;
using System.Diagnostics;
using System.Collections.ObjectModel;
using OpenCvSharp;
using System.Numerics;
using OpenCvSharp.Aruco;
using Point = OpenCvSharp.Point;


namespace 海康威视图像采集及处理
{
    public partial class Form1 : Form
    {
        // DLL导入
        [DllImport("kernel32.dll", EntryPoint = "RtlMoveMemory", SetLastError = false)]
        private static extern void CopyMemory(IntPtr dest, IntPtr src, uint count);

        // 常量定义
        public const Int32 CUSTOMER_PIXEL_FORMAT = unchecked((Int32)0x80000000);

        // 相机1相关变量
        MyCamera.MV_CC_DEVICE_INFO_LIST m_stDeviceList = new MyCamera.MV_CC_DEVICE_INFO_LIST();
        private MyCamera m_MyCamera = new MyCamera();
        bool m_bGrabbing = false;
        Thread m_hReceiveThread = null;
        MyCamera.MV_FRAME_OUT_INFO_EX m_stFrameInfo = new MyCamera.MV_FRAME_OUT_INFO_EX();

        // 相机2相关变量
        MyCamera.MV_CC_DEVICE_INFO_LIST m_stDeviceList2 = new MyCamera.MV_CC_DEVICE_INFO_LIST();
        private MyCamera m_MyCamera2 = new MyCamera();
        bool m_bGrabbing2 = false;
        Thread m_hReceiveThread2 = null;
        MyCamera.MV_FRAME_OUT_INFO_EX m_stFrameInfo2 = new MyCamera.MV_FRAME_OUT_INFO_EX();

        // 相机1图像缓存相关
        UInt32 m_nBufSizeForDriver = 0;
        IntPtr m_BufForDriver = IntPtr.Zero;
        private static Object BufForDriverLock = new Object();
        Bitmap m_bitmap = null;
        PixelFormat m_bitmapPixelFormat = PixelFormat.DontCare;
        IntPtr m_ConvertDstBuf = IntPtr.Zero;
        UInt32 m_nConvertDstBufLen = 0;

        // 相机2图像缓存相关
        UInt32 m_nBufSizeForDriver2 = 0;
        IntPtr m_BufForDriver2 = IntPtr.Zero;
        private static Object BufForDriverLock2 = new Object();
        Bitmap m_bitmap2 = null;
        PixelFormat m_bitmapPixelFormat2 = PixelFormat.DontCare;
        IntPtr m_ConvertDstBuf2 = IntPtr.Zero;
        UInt32 m_nConvertDstBufLen2 = 0;

        // 图像处理相关变量
        private bool IsImageProceee = false;
        private bool IsImageProceee2 = false;
        private int frameCounter = 0;
        private int frameCounter2 = 0;
        private bool IsTrigger = false;
        Thread TriggerThread = null;
        private object syncLock = new object();
        private (float X, float Y)?[] circleCenters = new (float X, float Y)?[2];

        // ArUco检测相关变量
        private CubeDetector cubeDetector1;
        private CubeDetector cubeDetector2;
        private Mat cameraMatrix;
        private Mat distCoeffs;
        private Dictionary<int, Mat> rvecCache = new Dictionary<int, Mat>();
        private Dictionary<int, Mat> tvecCache = new Dictionary<int, Mat>();

        public Form1()
        {
            InitializeComponent();
            Control.CheckForIllegalCrossThreadCalls = false;
            this.Load += new EventHandler(Form1_Load);

            // 初始化ArUco检测器
            cubeDetector1 = new CubeDetector();
            cubeDetector2 = new CubeDetector();

            // 初始化相机参数（需要根据实际标定结果修改）
            cameraMatrix = Mat.Eye(3, 3, MatType.CV_64F);
            cameraMatrix.Set<double>(0, 0, 1000.0); // fx
            cameraMatrix.Set<double>(1, 1, 1000.0); // fy
            cameraMatrix.Set<double>(0, 2, 1536 / 2.0); // cx
            cameraMatrix.Set<double>(1, 2, 1024 / 2.0); // cy

            distCoeffs = Mat.Zeros(rows: 1, cols: 5, type: MatType.CV_64F);
        }

        private void Form1_Load(object sender, EventArgs e)
        {
            // 初始化SDK
            MyCamera.MV_CC_Initialize_NET();
            // 枚举设备
            DeviceListAcq();
            DeviceListAcq2();
        }

        // 像素类型是否为Mono格式检查
        private Boolean IsMono(UInt32 enPixelType)
        {
            switch (enPixelType)
            {
                case (UInt32)MyCamera.MvGvspPixelType.PixelType_Gvsp_Mono1p:
                case (UInt32)MyCamera.MvGvspPixelType.PixelType_Gvsp_Mono2p:
                case (UInt32)MyCamera.MvGvspPixelType.PixelType_Gvsp_Mono4p:
                case (UInt32)MyCamera.MvGvspPixelType.PixelType_Gvsp_Mono8:
                case (UInt32)MyCamera.MvGvspPixelType.PixelType_Gvsp_Mono8_Signed:
                case (UInt32)MyCamera.MvGvspPixelType.PixelType_Gvsp_Mono10:
                case (UInt32)MyCamera.MvGvspPixelType.PixelType_Gvsp_Mono10_Packed:
                case (UInt32)MyCamera.MvGvspPixelType.PixelType_Gvsp_Mono12:
                case (UInt32)MyCamera.MvGvspPixelType.PixelType_Gvsp_Mono12_Packed:
                case (UInt32)MyCamera.MvGvspPixelType.PixelType_Gvsp_Mono14:
                case (UInt32)MyCamera.MvGvspPixelType.PixelType_Gvsp_Mono16:
                    return true;
                default:
                    return false;
            }
        }

        // 取图前的必要操作
        private Int32 NecessaryOperBeforeGrab()
        {
            // 获取图像宽度
            MyCamera.MVCC_INTVALUE_EX stWidth = new MyCamera.MVCC_INTVALUE_EX();
            int nRet = m_MyCamera.MV_CC_GetIntValueEx_NET("Width", ref stWidth);
            if (MyCamera.MV_OK != nRet)
            {
                ShowErrorMsg("Get Width Info Fail!", nRet);
                return nRet;
            }

            // 获取图像高度
            MyCamera.MVCC_INTVALUE_EX stHeight = new MyCamera.MVCC_INTVALUE_EX();
            nRet = m_MyCamera.MV_CC_GetIntValueEx_NET("Height", ref stHeight);
            if (MyCamera.MV_OK != nRet)
            {
                ShowErrorMsg("Get Height Info Fail!", nRet);
                return nRet;
            }

            // 获取像素格式
            MyCamera.MVCC_ENUMVALUE stPixelFormat = new MyCamera.MVCC_ENUMVALUE();
            nRet = m_MyCamera.MV_CC_GetEnumValue_NET("PixelFormat", ref stPixelFormat);
            if (MyCamera.MV_OK != nRet)
            {
                ShowErrorMsg("Get Pixel Format Fail!", nRet);
                return nRet;
            }

            // 设置bitmap像素格式，分配内存
            if ((Int32)MyCamera.MvGvspPixelType.PixelType_Gvsp_Undefined == (Int32)stPixelFormat.nCurValue)
            {
                ShowErrorMsg("Unknown Pixel Format!", MyCamera.MV_E_UNKNOW);
                return MyCamera.MV_E_UNKNOW;
            }
            else if (IsMono(stPixelFormat.nCurValue))
            {
                m_bitmapPixelFormat = PixelFormat.Format8bppIndexed;

                if (IntPtr.Zero != m_ConvertDstBuf)
                {
                    Marshal.Release(m_ConvertDstBuf);
                    m_ConvertDstBuf = IntPtr.Zero;
                }
                m_nConvertDstBufLen = (UInt32)(stWidth.nCurValue * stHeight.nCurValue);
                m_ConvertDstBuf = Marshal.AllocHGlobal((Int32)m_nConvertDstBufLen);
            }
            else
            {
                m_bitmapPixelFormat = PixelFormat.Format24bppRgb;

                if (IntPtr.Zero != m_ConvertDstBuf)
                {
                    Marshal.FreeHGlobal(m_ConvertDstBuf);
                    m_ConvertDstBuf = IntPtr.Zero;
                }
                m_nConvertDstBufLen = (UInt32)(3 * stWidth.nCurValue * stHeight.nCurValue);
                m_ConvertDstBuf = Marshal.AllocHGlobal((Int32)m_nConvertDstBufLen);
            }

            if (null != m_bitmap)
            {
                m_bitmap.Dispose();
                m_bitmap = null;
            }
            m_bitmap = new Bitmap((Int32)stWidth.nCurValue, (Int32)stHeight.nCurValue, m_bitmapPixelFormat);

            if (PixelFormat.Format8bppIndexed == m_bitmapPixelFormat)
            {
                ColorPalette palette = m_bitmap.Palette;
                for (int i = 0; i < palette.Entries.Length; i++)
                {
                    palette.Entries[i] = Color.FromArgb(i, i, i);
                }
                m_bitmap.Palette = palette;
            }

            return MyCamera.MV_OK;
        }

        // 显示错误信息
        private void ShowErrorMsg(string csMessage, int nErrorNum)
        {
            string errorMsg;
            if (nErrorNum == 0)
            {
                errorMsg = csMessage;
            }
            else
            {
                errorMsg = csMessage + ": Error =" + String.Format("{0:X}", nErrorNum);
            }

            switch (nErrorNum)
            {
                case MyCamera.MV_E_HANDLE: errorMsg += " Error or invalid handle "; break;
                case MyCamera.MV_E_SUPPORT: errorMsg += " Not supported function "; break;
                case MyCamera.MV_E_BUFOVER: errorMsg += " Cache is full "; break;
                case MyCamera.MV_E_CALLORDER: errorMsg += " Function calling order error "; break;
                case MyCamera.MV_E_PARAMETER: errorMsg += " Incorrect parameter "; break;
                case MyCamera.MV_E_RESOURCE: errorMsg += " Applying resource failed "; break;
                case MyCamera.MV_E_NODATA: errorMsg += " No data "; break;
                case MyCamera.MV_E_PRECONDITION: errorMsg += " Precondition error, or running environment changed "; break;
                case MyCamera.MV_E_VERSION: errorMsg += " Version mismatches "; break;
                case MyCamera.MV_E_NOENOUGH_BUF: errorMsg += " Insufficient memory "; break;
                case MyCamera.MV_E_UNKNOW: errorMsg += " Unknown error "; break;
                case MyCamera.MV_E_GC_GENERIC: errorMsg += " General error "; break;
                case MyCamera.MV_E_GC_ACCESS: errorMsg += " Node accessing condition error "; break;
                case MyCamera.MV_E_ACCESS_DENIED: errorMsg += " No permission "; break;
                case MyCamera.MV_E_BUSY: errorMsg += " Device is busy, or network disconnected "; break;
                case MyCamera.MV_E_NETER: errorMsg += " Network error "; break;
            }

            MessageBox.Show(errorMsg, "PROMPT");
        }

        // 用于清理设备名称中的空字符
        private string DeleteTail(string strUserDefinedName)
        {
            strUserDefinedName = Regex.Unescape(strUserDefinedName);
            int nIndex = strUserDefinedName.IndexOf("\0");
            if (nIndex >= 0)
            {
                strUserDefinedName = strUserDefinedName.Remove(nIndex);
            }
            return strUserDefinedName;
        }

        // 取图前的必要操作2
        private Int32 NecessaryOperBeforeGrab2()
        {
            MyCamera.MVCC_INTVALUE_EX stWidth = new MyCamera.MVCC_INTVALUE_EX();
            int nRet = m_MyCamera2.MV_CC_GetIntValueEx_NET("Width", ref stWidth);
            if (MyCamera.MV_OK != nRet)
            {
                ShowErrorMsg("Get Width Info Fail!", nRet);
                return nRet;
            }

            MyCamera.MVCC_INTVALUE_EX stHeight = new MyCamera.MVCC_INTVALUE_EX();
            nRet = m_MyCamera2.MV_CC_GetIntValueEx_NET("Height", ref stHeight);
            if (MyCamera.MV_OK != nRet)
            {
                ShowErrorMsg("Get Height Info Fail!", nRet);
                return nRet;
            }

            MyCamera.MVCC_ENUMVALUE stPixelFormat = new MyCamera.MVCC_ENUMVALUE();
            nRet = m_MyCamera2.MV_CC_GetEnumValue_NET("PixelFormat", ref stPixelFormat);
            if (MyCamera.MV_OK != nRet)
            {
                ShowErrorMsg("Get Pixel Format Fail!", nRet);
                return nRet;
            }

            if ((Int32)MyCamera.MvGvspPixelType.PixelType_Gvsp_Undefined == (Int32)stPixelFormat.nCurValue)
            {
                ShowErrorMsg("Unknown Pixel Format!", MyCamera.MV_E_UNKNOW);
                return MyCamera.MV_E_UNKNOW;
            }
            else if (IsMono(stPixelFormat.nCurValue))
            {
                m_bitmapPixelFormat2 = PixelFormat.Format8bppIndexed;

                if (IntPtr.Zero != m_ConvertDstBuf2)
                {
                    Marshal.Release(m_ConvertDstBuf2);
                    m_ConvertDstBuf2 = IntPtr.Zero;
                }
                m_nConvertDstBufLen2 = (UInt32)(stWidth.nCurValue * stHeight.nCurValue);
                m_ConvertDstBuf2 = Marshal.AllocHGlobal((Int32)m_nConvertDstBufLen2);
            }
            else
            {
                m_bitmapPixelFormat2 = PixelFormat.Format24bppRgb;

                if (IntPtr.Zero != m_ConvertDstBuf2)
                {
                    Marshal.FreeHGlobal(m_ConvertDstBuf2);
                    m_ConvertDstBuf2 = IntPtr.Zero;
                }
                m_nConvertDstBufLen2 = (UInt32)(3 * stWidth.nCurValue * stHeight.nCurValue);
                m_ConvertDstBuf2 = Marshal.AllocHGlobal((Int32)m_nConvertDstBufLen2);
            }

            if (null != m_bitmap2)
            {
                m_bitmap2.Dispose();
                m_bitmap2 = null;
            }
            m_bitmap2 = new Bitmap((Int32)stWidth.nCurValue, (Int32)stHeight.nCurValue, m_bitmapPixelFormat2);

            if (PixelFormat.Format8bppIndexed == m_bitmapPixelFormat2)
            {
                ColorPalette palette = m_bitmap2.Palette;
                for (int i = 0; i < palette.Entries.Length; i++)
                {
                    palette.Entries[i] = Color.FromArgb(i, i, i);
                }
                m_bitmap2.Palette = palette;
            }

            return MyCamera.MV_OK;
        }

        // 设备枚举相关方法
        private void btn_Enum_Click(object sender, EventArgs e)
        {
            DeviceListAcq();
        }

        private void btn_Enum2_Click(object sender, EventArgs e)
        {
            DeviceListAcq2();
        }

        private void DeviceListAcq()
        {
            System.GC.Collect();
            cbDeviceList.Items.Clear();
            m_stDeviceList.nDeviceNum = 0;

            int nRet = MyCamera.MV_CC_EnumDevices_NET(MyCamera.MV_GIGE_DEVICE | MyCamera.MV_USB_DEVICE | MyCamera.MV_GENTL_GIGE_DEVICE
                | MyCamera.MV_GENTL_CAMERALINK_DEVICE | MyCamera.MV_GENTL_CXP_DEVICE | MyCamera.MV_GENTL_XOF_DEVICE, ref m_stDeviceList);

            if (0 != nRet)
            {
                ShowErrorMsg("Enumerate devices fail!", 0);
                return;
            }

            // 在窗体列表中显示设备名
            for (int i = 0; i < m_stDeviceList.nDeviceNum; i++)
            {
                MyCamera.MV_CC_DEVICE_INFO device = (MyCamera.MV_CC_DEVICE_INFO)Marshal.PtrToStructure(m_stDeviceList.pDeviceInfo[i], typeof(MyCamera.MV_CC_DEVICE_INFO));
                string strUserDefinedName = "";

                if (device.nTLayerType == MyCamera.MV_GIGE_DEVICE)
                {
                    MyCamera.MV_GIGE_DEVICE_INFO_EX gigeInfo = (MyCamera.MV_GIGE_DEVICE_INFO_EX)MyCamera.ByteToStruct(device.SpecialInfo.stGigEInfo, typeof(MyCamera.MV_GIGE_DEVICE_INFO_EX));

                    if ((gigeInfo.chUserDefinedName.Length > 0) && (gigeInfo.chUserDefinedName[0] != '\0'))
                    {
                        if (MyCamera.IsTextUTF8(gigeInfo.chUserDefinedName))
                            strUserDefinedName = Encoding.UTF8.GetString(gigeInfo.chUserDefinedName).TrimEnd('\0');
                        else
                            strUserDefinedName = Encoding.Default.GetString(gigeInfo.chUserDefinedName).TrimEnd('\0');
                        cbDeviceList.Items.Add("GEV: " + DeleteTail(strUserDefinedName) + " (" + gigeInfo.chSerialNumber + ")");
                    }
                    else
                    {
                        cbDeviceList.Items.Add("GEV: " + gigeInfo.chManufacturerName + " " + gigeInfo.chModelName + " (" + gigeInfo.chSerialNumber + ")");
                    }
                }
                else if (device.nTLayerType == MyCamera.MV_USB_DEVICE)
                {
                    MyCamera.MV_USB3_DEVICE_INFO_EX usbInfo = (MyCamera.MV_USB3_DEVICE_INFO_EX)MyCamera.ByteToStruct(device.SpecialInfo.stUsb3VInfo, typeof(MyCamera.MV_USB3_DEVICE_INFO_EX));

                    if ((usbInfo.chUserDefinedName.Length > 0) && (usbInfo.chUserDefinedName[0] != '\0'))
                    {
                        if (MyCamera.IsTextUTF8(usbInfo.chUserDefinedName))
                            strUserDefinedName = Encoding.UTF8.GetString(usbInfo.chUserDefinedName).TrimEnd('\0');
                        else
                            strUserDefinedName = Encoding.Default.GetString(usbInfo.chUserDefinedName).TrimEnd('\0');
                        cbDeviceList.Items.Add("U3V: " + DeleteTail(strUserDefinedName) + " (" + usbInfo.chSerialNumber + ")");
                    }
                    else
                    {
                        cbDeviceList.Items.Add("U3V: " + usbInfo.chManufacturerName + " " + usbInfo.chModelName + " (" + usbInfo.chSerialNumber + ")");
                    }
                }
            }

            if (m_stDeviceList.nDeviceNum != 0)
            {
                cbDeviceList.SelectedIndex = 0;
            }
        }

        private void DeviceListAcq2()
        {
            System.GC.Collect();
            cbDeviceList2.Items.Clear();
            m_stDeviceList2.nDeviceNum = 0;

            int nRet = MyCamera.MV_CC_EnumDevices_NET(MyCamera.MV_GIGE_DEVICE | MyCamera.MV_USB_DEVICE | MyCamera.MV_GENTL_GIGE_DEVICE
                | MyCamera.MV_GENTL_CAMERALINK_DEVICE | MyCamera.MV_GENTL_CXP_DEVICE | MyCamera.MV_GENTL_XOF_DEVICE, ref m_stDeviceList2);

            if (0 != nRet)
            {
                ShowErrorMsg("Enumerate devices fail!", 0);
                return;
            }

            // 在窗体列表中显示设备名
            for (int i = 0; i < m_stDeviceList2.nDeviceNum; i++)
            {
                MyCamera.MV_CC_DEVICE_INFO device = (MyCamera.MV_CC_DEVICE_INFO)Marshal.PtrToStructure(m_stDeviceList2.pDeviceInfo[i], typeof(MyCamera.MV_CC_DEVICE_INFO));
                string strUserDefinedName = "";

                if (device.nTLayerType == MyCamera.MV_GIGE_DEVICE)
                {
                    MyCamera.MV_GIGE_DEVICE_INFO_EX gigeInfo = (MyCamera.MV_GIGE_DEVICE_INFO_EX)MyCamera.ByteToStruct(device.SpecialInfo.stGigEInfo, typeof(MyCamera.MV_GIGE_DEVICE_INFO_EX));

                    if ((gigeInfo.chUserDefinedName.Length > 0) && (gigeInfo.chUserDefinedName[0] != '\0'))
                    {
                        if (MyCamera.IsTextUTF8(gigeInfo.chUserDefinedName))
                            strUserDefinedName = Encoding.UTF8.GetString(gigeInfo.chUserDefinedName).TrimEnd('\0');
                        else
                            strUserDefinedName = Encoding.Default.GetString(gigeInfo.chUserDefinedName).TrimEnd('\0');
                        cbDeviceList2.Items.Add("GEV: " + DeleteTail(strUserDefinedName) + " (" + gigeInfo.chSerialNumber + ")");
                    }
                    else
                    {
                        cbDeviceList2.Items.Add("GEV: " + gigeInfo.chManufacturerName + " " + gigeInfo.chModelName + " (" + gigeInfo.chSerialNumber + ")");
                    }
                }
                else if (device.nTLayerType == MyCamera.MV_USB_DEVICE)
                {
                    MyCamera.MV_USB3_DEVICE_INFO_EX usbInfo = (MyCamera.MV_USB3_DEVICE_INFO_EX)MyCamera.ByteToStruct(device.SpecialInfo.stUsb3VInfo, typeof(MyCamera.MV_USB3_DEVICE_INFO_EX));

                    if ((usbInfo.chUserDefinedName.Length > 0) && (usbInfo.chUserDefinedName[0] != '\0'))
                    {
                        if (MyCamera.IsTextUTF8(usbInfo.chUserDefinedName))
                            strUserDefinedName = Encoding.UTF8.GetString(usbInfo.chUserDefinedName).TrimEnd('\0');
                        else
                            strUserDefinedName = Encoding.Default.GetString(usbInfo.chUserDefinedName).TrimEnd('\0');
                        cbDeviceList2.Items.Add("U3V: " + DeleteTail(strUserDefinedName) + " (" + usbInfo.chSerialNumber + ")");
                    }
                    else
                    {
                        cbDeviceList2.Items.Add("U3V: " + usbInfo.chManufacturerName + " " + usbInfo.chModelName + " (" + usbInfo.chSerialNumber + ")");
                    }
                }
            }

            if (m_stDeviceList2.nDeviceNum != 0)
            {
                cbDeviceList2.SelectedIndex = 0;
            }
        }

        // 设备打开关闭相关方法
        private void btn_OpenDevice_Click(object sender, EventArgs e)
        {
            if (m_stDeviceList.nDeviceNum == 0 || cbDeviceList.SelectedIndex == -1)
            {
                ShowErrorMsg("No device, please select", 0);
                return;
            }

            MyCamera.MV_CC_DEVICE_INFO device =
                (MyCamera.MV_CC_DEVICE_INFO)Marshal.PtrToStructure(m_stDeviceList.pDeviceInfo[cbDeviceList.SelectedIndex],
                                                              typeof(MyCamera.MV_CC_DEVICE_INFO));

            if (null == m_MyCamera)
            {
                m_MyCamera = new MyCamera();
                if (null == m_MyCamera)
                {
                    ShowErrorMsg("Applying resource fail!", MyCamera.MV_E_RESOURCE);
                    return;
                }
            }

            int nRet = m_MyCamera.MV_CC_CreateDevice_NET(ref device);
            if (MyCamera.MV_OK != nRet)
            {
                ShowErrorMsg("Create device fail!", nRet);
                return;
            }

            nRet = m_MyCamera.MV_CC_OpenDevice_NET();
            if (MyCamera.MV_OK != nRet)
            {
                m_MyCamera.MV_CC_DestroyDevice_NET();
                ShowErrorMsg("Device open fail!", nRet);
                return;
            }

            // 探测网络最佳包大小(只对GigE相机有效)
            if (device.nTLayerType == MyCamera.MV_GIGE_DEVICE)
            {
                int nPacketSize = m_MyCamera.MV_CC_GetOptimalPacketSize_NET();
                if (nPacketSize > 0)
                {
                    nRet = m_MyCamera.MV_CC_SetIntValueEx_NET("GevSCPSPacketSize", nPacketSize);
                    if (nRet != MyCamera.MV_OK)
                    {
                        ShowErrorMsg("Set Packet Size failed!", nRet);
                    }
                }
                else
                {
                    ShowErrorMsg("Get Packet Size failed!", nPacketSize);
                }
            }

            // 设置触发模式为off
            m_MyCamera.MV_CC_SetEnumValue_NET("TriggerMode", (uint)MyCamera.MV_CAM_TRIGGER_MODE.MV_TRIGGER_MODE_OFF);

            // 获取参数
            bnGetParam_Click(null, null);

            SetCtrlWhenOpen();
        }

        private void btn_OpenDevice2_Click(object sender, EventArgs e)
        {
            if (m_stDeviceList2.nDeviceNum == 0 || cbDeviceList2.SelectedIndex == -1)
            {
                ShowErrorMsg("No device, please select", 0);
                return;
            }

            MyCamera.MV_CC_DEVICE_INFO device2 =
                (MyCamera.MV_CC_DEVICE_INFO)Marshal.PtrToStructure(m_stDeviceList2.pDeviceInfo[cbDeviceList2.SelectedIndex],
                                                              typeof(MyCamera.MV_CC_DEVICE_INFO));

            if (null == m_MyCamera2)
            {
                m_MyCamera2 = new MyCamera();
                if (null == m_MyCamera2)
                {
                    ShowErrorMsg("Applying resource fail!", MyCamera.MV_E_RESOURCE);
                    return;
                }
            }

            int nRet = m_MyCamera2.MV_CC_CreateDevice_NET(ref device2);
            if (MyCamera.MV_OK != nRet)
            {
                ShowErrorMsg("Create device fail!", nRet);
                return;
            }

            nRet = m_MyCamera2.MV_CC_OpenDevice_NET();
            if (MyCamera.MV_OK != nRet)
            {
                m_MyCamera2.MV_CC_DestroyDevice_NET();
                ShowErrorMsg("Device open fail!", nRet);
                return;
            }

            if (device2.nTLayerType == MyCamera.MV_GIGE_DEVICE)
            {
                int nPacketSize2 = m_MyCamera2.MV_CC_GetOptimalPacketSize_NET();
                if (nPacketSize2 > 0)
                {
                    nRet = m_MyCamera2.MV_CC_SetIntValueEx_NET("GevSCPSPacketSize", nPacketSize2);
                    if (nRet != MyCamera.MV_OK)
                    {
                        ShowErrorMsg("Set Packet Size failed!", nRet);
                    }
                }
                else
                {
                    ShowErrorMsg("Get Packet Size failed!", nPacketSize2);
                }
            }

            m_MyCamera2.MV_CC_SetEnumValue_NET("TriggerMode", (uint)MyCamera.MV_CAM_TRIGGER_MODE.MV_TRIGGER_MODE_OFF);

            bnGetParam2_Click(null, null);

            SetCtrlWhenOpen2();
        }

        private void btn_CloseDevice_Click(object sender, EventArgs e)
        {
            if (m_bGrabbing == true)
            {
                m_bGrabbing = false;
                m_hReceiveThread.Join();
            }

            if (m_BufForDriver != IntPtr.Zero)
            {
                Marshal.Release(m_BufForDriver);
            }

            if (m_MyCamera != null)
            {
                m_MyCamera.MV_CC_CloseDevice_NET();
                m_MyCamera.MV_CC_DestroyDevice_NET();
            }

            SetCtrlWhenClose();
        }

        private void btn_CloseDevice2_Click(object sender, EventArgs e)
        {
            if (m_bGrabbing2 == true)
            {
                m_bGrabbing2 = false;
                m_hReceiveThread2.Join();
            }

            if (m_BufForDriver2 != IntPtr.Zero)
            {
                Marshal.Release(m_BufForDriver2);
            }

            if (m_MyCamera2 != null)
            {
                m_MyCamera2.MV_CC_CloseDevice_NET();
                m_MyCamera2.MV_CC_DestroyDevice_NET();
            }

            SetCtrlWhenClose2();
        }

        // 参数设置相关方法
        private void bnGetParam_Click(object sender, EventArgs e)
        {
            MyCamera.MVCC_FLOATVALUE stParam = new MyCamera.MVCC_FLOATVALUE();
            int nRet = m_MyCamera.MV_CC_GetFloatValue_NET("ExposureTime", ref stParam);
            if (MyCamera.MV_OK == nRet)
            {
                tbExposure.Text = stParam.fCurValue.ToString("F1");
            }

            nRet = m_MyCamera.MV_CC_GetFloatValue_NET("Gain", ref stParam);
            if (MyCamera.MV_OK == nRet)
            {
                tbGain.Text = stParam.fCurValue.ToString("F1");
            }

            nRet = m_MyCamera.MV_CC_GetFloatValue_NET("ResultingFrameRate", ref stParam);
            if (MyCamera.MV_OK == nRet)
            {
                tbFrameRate.Text = stParam.fCurValue.ToString("F1");
            }
        }

        private void bnGetParam2_Click(object sender, EventArgs e)
        {
            MyCamera.MVCC_FLOATVALUE stParam = new MyCamera.MVCC_FLOATVALUE();
            int nRet = m_MyCamera2.MV_CC_GetFloatValue_NET("ExposureTime", ref stParam);
            if (MyCamera.MV_OK == nRet)
            {
                tbExposure2.Text = stParam.fCurValue.ToString("F1");
            }

            nRet = m_MyCamera2.MV_CC_GetFloatValue_NET("Gain", ref stParam);
            if (MyCamera.MV_OK == nRet)
            {
                tbGain2.Text = stParam.fCurValue.ToString("F1");
            }

            nRet = m_MyCamera2.MV_CC_GetFloatValue_NET("ResultingFrameRate", ref stParam);
            if (MyCamera.MV_OK == nRet)
            {
                tbFrameRate2.Text = stParam.fCurValue.ToString("F1");
            }
        }

        private void bnSetParam_Click(object sender, EventArgs e)
        {
            try
            {
                float.Parse(tbExposure.Text);
                float.Parse(tbGain.Text);
                float.Parse(tbFrameRate.Text);
            }
            catch
            {
                ShowErrorMsg("Please enter correct type!", 0);
                return;
            }

            m_MyCamera.MV_CC_SetEnumValue_NET("ExposureAuto", 0);
            int nRet = m_MyCamera.MV_CC_SetFloatValue_NET("ExposureTime", float.Parse(tbExposure.Text));
            if (nRet != MyCamera.MV_OK)
            {
                ShowErrorMsg("Set Exposure Time Fail!", nRet);
            }

            m_MyCamera.MV_CC_SetEnumValue_NET("GainAuto", 0);
            nRet = m_MyCamera.MV_CC_SetFloatValue_NET("Gain", float.Parse(tbGain.Text));
            if (nRet != MyCamera.MV_OK)
            {
                ShowErrorMsg("Set Gain Fail!", nRet);
            }

            nRet = m_MyCamera.MV_CC_SetFloatValue_NET("AcquisitionFrameRate", float.Parse(tbFrameRate.Text));
            if (nRet != MyCamera.MV_OK)
            {
                ShowErrorMsg("Set Frame Rate Fail!", nRet);
            }
        }

        private void bnSetParam2_Click(object sender, EventArgs e)
        {
            try
            {
                float.Parse(tbExposure2.Text);
                float.Parse(tbGain2.Text);
                float.Parse(tbFrameRate2.Text);
            }
            catch
            {
                ShowErrorMsg("Please enter correct type!", 0);
                return;
            }

            m_MyCamera2.MV_CC_SetEnumValue_NET("ExposureAuto", 0);
            int nRet = m_MyCamera2.MV_CC_SetFloatValue_NET("ExposureTime", float.Parse(tbExposure2.Text));
            if (nRet != MyCamera.MV_OK)
            {
                ShowErrorMsg("Set Exposure Time Fail!", nRet);
            }

            m_MyCamera2.MV_CC_SetEnumValue_NET("GainAuto", 0);
            nRet = m_MyCamera2.MV_CC_SetFloatValue_NET("Gain", float.Parse(tbGain2.Text));
            if (nRet != MyCamera.MV_OK)
            {
                ShowErrorMsg("Set Gain Fail!", nRet);
            }

            nRet = m_MyCamera2.MV_CC_SetFloatValue_NET("AcquisitionFrameRate", float.Parse(tbFrameRate2.Text));
            if (nRet != MyCamera.MV_OK)
            {
                ShowErrorMsg("Set Frame Rate Fail!", nRet);
            }
        }

        // 控件操作相关方法
        private void SetCtrlWhenOpen()
        {
            btn_OpenDevice.Enabled = false;
            btn_CloseDevice.Enabled = true;
            bnStartGrab.Enabled = true;
            bnStopGrab.Enabled = false;
            bnContinuesMode.Enabled = true;
            bnContinuesMode.Checked = true;
            bnTriggerMode.Enabled = true;
            cbSoftTrigger.Enabled = false;
            cbImageProcess.Enabled = true;
            bnTriggerExec.Enabled = false;

            tbExposure.Enabled = true;
            tbGain.Enabled = true;
            tbFrameRate.Enabled = true;
            bnGetParam.Enabled = true;
            bnSetParam.Enabled = true;
        }

        private void SetCtrlWhenOpen2()
        {
            btn_OpenDevice2.Enabled = false;
            btn_CloseDevice2.Enabled = true;
            bnStartGrab2.Enabled = true;
            bnStopGrab2.Enabled = false;
            bnContinuesMode2.Enabled = true;
            bnContinuesMode2.Checked = true;
            bnTriggerMode2.Enabled = true;
            cbSoftTrigger2.Enabled = false;
            cbImageProcess2.Enabled = true;
            bnTriggerExec2.Enabled = false;

            tbExposure2.Enabled = true;
            tbGain2.Enabled = true;
            tbFrameRate2.Enabled = true;
            bnGetParam2.Enabled = true;
            bnSetParam2.Enabled = true;
        }

        private void SetCtrlWhenClose()
        {
            btn_OpenDevice.Enabled = true;
            btn_CloseDevice.Enabled = false;
            bnStartGrab.Enabled = false;
            bnStopGrab.Enabled = false;
            bnContinuesMode.Enabled = false;
            bnTriggerMode.Enabled = false;
            cbSoftTrigger.Enabled = false;
            cbImageProcess.Enabled = false;
            bnTriggerExec.Enabled = false;

            tbExposure.Enabled = false;
            tbGain.Enabled = false;
            tbFrameRate.Enabled = false;
            bnGetParam.Enabled = false;
            bnSetParam.Enabled = false;
        }

        private void SetCtrlWhenClose2()
        {
            btn_OpenDevice2.Enabled = true;
            btn_CloseDevice2.Enabled = false;
            bnStartGrab2.Enabled = false;
            bnStopGrab2.Enabled = false;
            bnContinuesMode2.Enabled = false;
            bnTriggerMode2.Enabled = false;
            cbSoftTrigger2.Enabled = false;
            cbImageProcess2.Enabled = false;
            bnTriggerExec2.Enabled = false;

            tbExposure2.Enabled = false;
            tbGain2.Enabled = false;
            tbFrameRate2.Enabled = false;
            bnGetParam2.Enabled = false;
            bnSetParam2.Enabled = false;
        }

        private void SetCtrlWhenStartGrab()
        {
            bnStartGrab.Enabled = false;
            bnStopGrab.Enabled = true;

            if (bnTriggerMode.Checked && cbSoftTrigger.Checked)
            {
                bnTriggerExec.Enabled = true;
            }

            cbImageProcess.Enabled = true;
        }

        private void SetCtrlWhenStartGrab2()
        {
            bnStartGrab2.Enabled = false;
            bnStopGrab2.Enabled = true;

            if (bnTriggerMode2.Checked && cbSoftTrigger2.Checked)
            {
                bnTriggerExec2.Enabled = true;
            }

            cbImageProcess2.Enabled = true;
        }

        private void SetCtrlWhenStopGrab()
        {
            bnStartGrab.Enabled = true;
            bnStopGrab.Enabled = false;
            bnTriggerExec.Enabled = false;
        }

        private void SetCtrlWhenStopGrab2()
        {
            bnStartGrab2.Enabled = true;
            bnStopGrab2.Enabled = false;
            bnTriggerExec2.Enabled = false;
        }
        // 图像采集相关方法
        private void bnStartGrab_Click(object sender, EventArgs e)
        {
            int nRet = NecessaryOperBeforeGrab();
            if (MyCamera.MV_OK != nRet)
            {
                return;
            }

            m_bGrabbing = true;
            m_stFrameInfo.nFrameLen = 0;
            m_stFrameInfo.enPixelType = MyCamera.MvGvspPixelType.PixelType_Gvsp_Undefined;

            m_hReceiveThread = new Thread(ReceiveThreadProcess);
            m_hReceiveThread.Start();

            nRet = m_MyCamera.MV_CC_StartGrabbing_NET();
            if (MyCamera.MV_OK != nRet)
            {
                m_bGrabbing = false;
                m_hReceiveThread.Join();
                ShowErrorMsg("Start Grabbing Fail!", nRet);
                return;
            }

            SetCtrlWhenStartGrab();
        }

        private void bnStartGrab2_Click(object sender, EventArgs e)
        {
            int nRet = NecessaryOperBeforeGrab2();
            if (MyCamera.MV_OK != nRet)
            {
                return;
            }

            m_bGrabbing2 = true;
            m_stFrameInfo2.nFrameLen = 0;
            m_stFrameInfo2.enPixelType = MyCamera.MvGvspPixelType.PixelType_Gvsp_Undefined;

            m_hReceiveThread2 = new Thread(ReceiveThreadProcess2);
            m_hReceiveThread2.Start();

            nRet = m_MyCamera2.MV_CC_StartGrabbing_NET();
            if (MyCamera.MV_OK != nRet)
            {
                m_bGrabbing2 = false;
                m_hReceiveThread2.Join();
                ShowErrorMsg("Start Grabbing Fail!", nRet);
                return;
            }

            SetCtrlWhenStartGrab2();
        }

        private void bnStopGrab_Click(object sender, EventArgs e)
        {
            m_bGrabbing = false;
            m_hReceiveThread.Join();

            int nRet = m_MyCamera.MV_CC_StopGrabbing_NET();
            if (nRet != MyCamera.MV_OK)
            {
                ShowErrorMsg("Stop Grabbing Fail!", nRet);
            }

            SetCtrlWhenStopGrab();
        }

        private void bnStopGrab2_Click(object sender, EventArgs e)
        {
            m_bGrabbing2 = false;
            m_hReceiveThread2.Join();

            int nRet = m_MyCamera2.MV_CC_StopGrabbing_NET();
            if (nRet != MyCamera.MV_OK)
            {
                ShowErrorMsg("Stop Grabbing Fail!", nRet);
            }

            SetCtrlWhenStopGrab2();
        }

        // 图像接收线程
        public void ReceiveThreadProcess()
        {
            MyCamera.MV_FRAME_OUT stFrameInfo = new MyCamera.MV_FRAME_OUT();
            MyCamera.MV_DISPLAY_FRAME_INFO stDisplayInfo = new MyCamera.MV_DISPLAY_FRAME_INFO();
            MyCamera.MV_PIXEL_CONVERT_PARAM stConvertInfo = new MyCamera.MV_PIXEL_CONVERT_PARAM();
            int nRet = MyCamera.MV_OK;

            while (m_bGrabbing)
            {
                nRet = m_MyCamera.MV_CC_GetImageBuffer_NET(ref stFrameInfo, 1000);
                if (nRet == MyCamera.MV_OK)
                {
                    lock (BufForDriverLock)
                    {
                        if (m_BufForDriver == IntPtr.Zero || stFrameInfo.stFrameInfo.nFrameLen > m_nBufSizeForDriver)
                        {
                            if (m_BufForDriver != IntPtr.Zero)
                            {
                                Marshal.Release(m_BufForDriver);
                                m_BufForDriver = IntPtr.Zero;
                            }

                            m_BufForDriver = Marshal.AllocHGlobal((Int32)stFrameInfo.stFrameInfo.nFrameLen);
                            if (m_BufForDriver == IntPtr.Zero)
                            {
                                return;
                            }
                            m_nBufSizeForDriver = stFrameInfo.stFrameInfo.nFrameLen;
                        }

                        m_stFrameInfo = stFrameInfo.stFrameInfo;
                        CopyMemory(m_BufForDriver, stFrameInfo.pBufAddr, stFrameInfo.stFrameInfo.nFrameLen);

                        stConvertInfo.nWidth = stFrameInfo.stFrameInfo.nWidth;
                        stConvertInfo.nHeight = stFrameInfo.stFrameInfo.nHeight;
                        stConvertInfo.enSrcPixelType = stFrameInfo.stFrameInfo.enPixelType;
                        stConvertInfo.pSrcData = stFrameInfo.pBufAddr;
                        stConvertInfo.nSrcDataLen = stFrameInfo.stFrameInfo.nFrameLen;
                        stConvertInfo.pDstBuffer = m_ConvertDstBuf;
                        stConvertInfo.nDstBufferSize = m_nConvertDstBufLen;
                        if (PixelFormat.Format8bppIndexed == m_bitmap.PixelFormat)
                        {
                            stConvertInfo.enDstPixelType = MyCamera.MvGvspPixelType.PixelType_Gvsp_Mono8;
                            m_MyCamera.MV_CC_ConvertPixelType_NET(ref stConvertInfo);
                        }
                        else
                        {
                            stConvertInfo.enDstPixelType = MyCamera.MvGvspPixelType.PixelType_Gvsp_BGR8_Packed;
                            m_MyCamera.MV_CC_ConvertPixelType_NET(ref stConvertInfo);
                        }

                        BitmapData bmpData = m_bitmap.LockBits(new Rectangle(0, 0, stConvertInfo.nWidth, stConvertInfo.nHeight),
                            ImageLockMode.ReadWrite, m_bitmap.PixelFormat);
                        CopyMemory(bmpData.Scan0, stConvertInfo.pDstBuffer, (UInt32)(bmpData.Stride * m_bitmap.Height));
                        m_bitmap.UnlockBits(bmpData);

                        if (IsImageProceee)
                        {
                            Mat mat = OpenCvSharp.Extensions.BitmapConverter.ToMat(m_bitmap);
                            ProcessAndDisplayImageAsync(mat);
                        }
                    }

                    stDisplayInfo.hWnd = pictureBox1.Handle;
                    stDisplayInfo.pData = stFrameInfo.pBufAddr;
                    stDisplayInfo.nDataLen = stFrameInfo.stFrameInfo.nFrameLen;
                    stDisplayInfo.nWidth = stFrameInfo.stFrameInfo.nWidth;
                    stDisplayInfo.nHeight = stFrameInfo.stFrameInfo.nHeight;
                    stDisplayInfo.enPixelType = stFrameInfo.stFrameInfo.enPixelType;
                    m_MyCamera.MV_CC_DisplayOneFrame_NET(ref stDisplayInfo);

                    m_MyCamera.MV_CC_FreeImageBuffer_NET(ref stFrameInfo);
                }
                else
                {
                    if (bnTriggerMode.Checked)
                    {
                        Thread.Sleep(5);
                    }
                }
            }
        }

        public void ReceiveThreadProcess2()
        {
            MyCamera.MV_FRAME_OUT stFrameInfo = new MyCamera.MV_FRAME_OUT();
            MyCamera.MV_DISPLAY_FRAME_INFO stDisplayInfo = new MyCamera.MV_DISPLAY_FRAME_INFO();
            MyCamera.MV_PIXEL_CONVERT_PARAM stConvertInfo = new MyCamera.MV_PIXEL_CONVERT_PARAM();
            int nRet = MyCamera.MV_OK;

            while (m_bGrabbing2)
            {
                nRet = m_MyCamera2.MV_CC_GetImageBuffer_NET(ref stFrameInfo, 1000);
                if (nRet == MyCamera.MV_OK)
                {
                    lock (BufForDriverLock2)
                    {
                        if (m_BufForDriver2 == IntPtr.Zero || stFrameInfo.stFrameInfo.nFrameLen > m_nBufSizeForDriver2)
                        {
                            if (m_BufForDriver2 != IntPtr.Zero)
                            {
                                Marshal.Release(m_BufForDriver2);
                                m_BufForDriver2 = IntPtr.Zero;
                            }

                            m_BufForDriver2 = Marshal.AllocHGlobal((Int32)stFrameInfo.stFrameInfo.nFrameLen);
                            if (m_BufForDriver2 == IntPtr.Zero)
                            {
                                return;
                            }
                            m_nBufSizeForDriver2 = stFrameInfo.stFrameInfo.nFrameLen;
                        }

                        m_stFrameInfo2 = stFrameInfo.stFrameInfo;
                        CopyMemory(m_BufForDriver2, stFrameInfo.pBufAddr, stFrameInfo.stFrameInfo.nFrameLen);

                        stConvertInfo.nWidth = stFrameInfo.stFrameInfo.nWidth;
                        stConvertInfo.nHeight = stFrameInfo.stFrameInfo.nHeight;
                        stConvertInfo.enSrcPixelType = stFrameInfo.stFrameInfo.enPixelType;
                        stConvertInfo.pSrcData = stFrameInfo.pBufAddr;
                        stConvertInfo.nSrcDataLen = stFrameInfo.stFrameInfo.nFrameLen;
                        stConvertInfo.pDstBuffer = m_ConvertDstBuf2;
                        stConvertInfo.nDstBufferSize = m_nConvertDstBufLen2;
                        if (PixelFormat.Format8bppIndexed == m_bitmap2.PixelFormat)
                        {
                            stConvertInfo.enDstPixelType = MyCamera.MvGvspPixelType.PixelType_Gvsp_Mono8;
                            m_MyCamera2.MV_CC_ConvertPixelType_NET(ref stConvertInfo);
                        }
                        else
                        {
                            stConvertInfo.enDstPixelType = MyCamera.MvGvspPixelType.PixelType_Gvsp_BGR8_Packed;
                            m_MyCamera2.MV_CC_ConvertPixelType_NET(ref stConvertInfo);
                        }

                        BitmapData bmpData = m_bitmap2.LockBits(new Rectangle(0, 0, stConvertInfo.nWidth, stConvertInfo.nHeight),
                            ImageLockMode.ReadWrite, m_bitmap2.PixelFormat);
                        CopyMemory(bmpData.Scan0, stConvertInfo.pDstBuffer, (UInt32)(bmpData.Stride * m_bitmap2.Height));
                        m_bitmap2.UnlockBits(bmpData);

                        if (IsImageProceee2)
                        {
                            Mat mat = OpenCvSharp.Extensions.BitmapConverter.ToMat(m_bitmap2);
                            ProcessAndDisplayImageAsync2(mat);
                        }
                    }

                    stDisplayInfo.hWnd = pictureBox3.Handle;
                    stDisplayInfo.pData = stFrameInfo.pBufAddr;
                    stDisplayInfo.nDataLen = stFrameInfo.stFrameInfo.nFrameLen;
                    stDisplayInfo.nWidth = stFrameInfo.stFrameInfo.nWidth;
                    stDisplayInfo.nHeight = stFrameInfo.stFrameInfo.nHeight;
                    stDisplayInfo.enPixelType = stFrameInfo.stFrameInfo.enPixelType;
                    m_MyCamera2.MV_CC_DisplayOneFrame_NET(ref stDisplayInfo);

                    m_MyCamera2.MV_CC_FreeImageBuffer_NET(ref stFrameInfo);
                }
                else
                {
                    if (bnTriggerMode2.Checked)
                    {
                        Thread.Sleep(5);
                    }
                }
            }
        }

        // 新增的 ArUco 检测相关代码
        private Mat ProcessImage(Mat image, out Mat grayImage, out Mat blurredImage, out float CenterX, out float CenterY)
        {
            CenterX = 0;
            CenterY = 0;

            // 转换为灰度图
            grayImage = new Mat();
            Cv2.CvtColor(image, grayImage, ColorConversionCodes.BGR2GRAY);

            // 高斯模糊
            blurredImage = new Mat();
            Cv2.GaussianBlur(grayImage, blurredImage, new OpenCvSharp.Size(9, 9), 2, 2);

            Mat outputImage = image.Clone();
            try
            {
                // 检测ArUco标记
                var dictionary = CvAruco.GetPredefinedDictionary(PredefinedDictionaryName.Dict5X5_250);
                CvAruco.DetectMarkers(grayImage, dictionary, out Point2f[][] corners, out int[] ids,
                    new DetectorParameters(), out Point2f[][] rejected);

                if (ids != null && ids.Length > 0)
                {
                    // 绘制检测到的标记
                    CvAruco.DrawDetectedMarkers(outputImage, corners, ids);

                    foreach (int markerId in ids)
                    {
                        int markerIdx = Array.IndexOf(ids, markerId);
                        if (markerIdx >= 0)
                        {
                            // 计算标记中心点
                            Point2f center = new Point2f(0, 0);
                            foreach (var corner in corners[markerIdx])
                            {
                                center.X += corner.X;
                                center.Y += corner.Y;
                            }
                            center.X /= 4;
                            center.Y /= 4;

                            CenterX = center.X;
                            CenterY = center.Y;

                            // 估计每个标记的姿态
                            var rvec = new Mat();
                            var tvec = new Mat();
                            Point3f[] objectPoints = new Point3f[]
                            {
                                new Point3f(-15, 15, 0),
                                new Point3f(15, 15, 0),
                                new Point3f(15, -15, 0),
                                new Point3f(-15, -15, 0)
                            };

                            Cv2.SolvePnP(
    InputArray.Create(objectPoints),
    InputArray.Create(corners[markerIdx]),
    cameraMatrix,
    distCoeffs,
    rvec,
    tvec
);
                            // 绘制坐标轴
                            Point3f[] axisPoints = new Point3f[]
                            {
    new Point3f(0, 0, 0),
    new Point3f(30, 0, 0),
    new Point3f(0, 30, 0),
    new Point3f(0, 0, 30)
                            };

                            // 创建输出 Mat
                            Mat imagePointsMat = new Mat();
                            try
                            {
                                // 执行投影
                                Cv2.ProjectPoints(
                                    InputArray.Create(axisPoints),     // 输入3D点
                                    rvec,                              // 旋转向量
                                    tvec,                              // 平移向量
                                    cameraMatrix,                      // 相机矩阵
                                    distCoeffs,                        // 畸变系数
                                    imagePointsMat                     // 输出2D点
                                );

                                // 获取投影结果
                                Point2f[] imagePoints = new Point2f[axisPoints.Length];
                                for (int i = 0; i < axisPoints.Length; i++)
                                {
                                    imagePoints[i] = imagePointsMat.At<Point2f>(i);
                                }

                                // 绘制坐标轴
                                Cv2.Line(outputImage, (Point)imagePoints[0], (Point)imagePoints[1], new Scalar(0, 0, 255), 2);
                                Cv2.Line(outputImage, (Point)imagePoints[0], (Point)imagePoints[2], new Scalar(0, 255, 0), 2);
                                Cv2.Line(outputImage, (Point)imagePoints[0], (Point)imagePoints[3], new Scalar(255, 0, 0), 2);
                            }
                            finally
                            {
                                // 释放资源
                                imagePointsMat?.Dispose();
                            }

                            var text = $"ID:{markerId} X:{tvec.Get<double>(0):F1} Y:{tvec.Get<double>(1):F1} Z:{tvec.Get<double>(2):F1}";
                            Cv2.PutText(outputImage, text, new Point(10, 30 + markerId * 30),
                                HersheyFonts.HersheyPlain, 1, new Scalar(0, 255, 0), 2);

                            rvec.Dispose();
                            tvec.Dispose();
                        }
                    }
                }
            }
            catch (OpenCVException ex)
            {
                MessageBox.Show($"图像处理错误: {ex.Message}");
            }
            catch (Exception ex)
            {
                MessageBox.Show($"系统错误: {ex.Message}");
            }

            return outputImage;
        }
        // 异步图像处理相关方法
        private void ProcessAndDisplayImageAsync(Mat mat)
        {
            Task.Run(() =>
            {
                Mat grayImage, blurredImage;
                float X, Y;
                Mat processedImage = ProcessImage(mat, out grayImage, out blurredImage, out X, out Y);

                lock (syncLock)
                {
                    circleCenters[0] = (X, Y);
                    if (circleCenters[0].HasValue && circleCenters[1].HasValue)
                    {
                        var center1 = circleCenters[0].Value;
                        var center2 = circleCenters[1].Value;

                        float X3D, Y3D, Z3D;
                        if (!(center1.X == 0 && center1.Y == 0 || center2.X == 0 && center2.Y == 0))
                        {
                            ProcessCircleCenters(center1.X, center1.Y, center2.X, center2.Y, out X3D, out Y3D, out Z3D);
                        }

                        circleCenters[0] = null;
                        circleCenters[1] = null;
                    }
                }

                this.Invoke((Action)(() =>
                {
                    string center = X.ToString() + "," + Y.ToString();
                    UpdateTextBox(center);
                    pictureBox2.Image = OpenCvSharp.Extensions.BitmapConverter.ToBitmap(processedImage);
                }));
            });
        }

        private void ProcessAndDisplayImageAsync2(Mat mat)
        {
            Task.Run(() =>
            {
                Mat grayImage, blurredImage;
                float X, Y;
                Mat processedImage = ProcessImage(mat, out grayImage, out blurredImage, out X, out Y);

                lock (syncLock)
                {
                    circleCenters[1] = (X, Y);
                    if (circleCenters[0].HasValue && circleCenters[1].HasValue)
                    {
                        var center1 = circleCenters[0].Value;
                        var center2 = circleCenters[1].Value;

                        float X3D, Y3D, Z3D;
                        if (!(center1.X == 0 && center1.Y == 0 || center2.X == 0 && center2.Y == 0))
                        {
                            ProcessCircleCenters(center1.X, center1.Y, center2.X, center2.Y, out X3D, out Y3D, out Z3D);
                        }

                        circleCenters[0] = null;
                        circleCenters[1] = null;
                    }
                }

                this.Invoke((Action)(() =>
                {
                    string center = X.ToString() + "," + Y.ToString();
                    UpdateTextBox2(center);
                    pictureBox4.Image = OpenCvSharp.Extensions.BitmapConverter.ToBitmap(processedImage);
                }));
            });
        }

        private void ProcessCircleCenters(float X1, float Y1, float X2, float Y2, out float X, out float Y, out float Z)
        {
            float X1D = (1536 - X1) / 7680;
            float X2D = (1536 - X2) / 7680;
            float Y1D = (1024 - Y1) / 7680;
            X = ((((45 * X1D * X2D) + (45 * X2D)) / (1 + X1D * X2D)) + 12);
            Y = (((45 - X) * X1D) + 11);
            Z = (((45 - X) * Y1D) + 7);

            String Center = X.ToString() + ", " + Y.ToString() + ", " + Z.ToString();
            UpdateTextBox3(Center);
        }

        // 触发模式相关方法
        private void bnContinuesMode_CheckedChanged(object sender, EventArgs e)
        {
            if (bnContinuesMode.Checked)
            {
                m_MyCamera.MV_CC_SetEnumValue_NET("TriggerMode", (uint)MyCamera.MV_CAM_TRIGGER_MODE.MV_TRIGGER_MODE_OFF);
                cbSoftTrigger.Enabled = false;
                bnTriggerExec.Enabled = false;
            }
        }

        private void bnTriggerMode_CheckedChanged(object sender, EventArgs e)
        {
            if (bnTriggerMode.Checked)
            {
                m_MyCamera.MV_CC_SetEnumValue_NET("TriggerMode", (uint)MyCamera.MV_CAM_TRIGGER_MODE.MV_TRIGGER_MODE_ON);

                if (cbSoftTrigger.Checked)
                {
                    m_MyCamera.MV_CC_SetEnumValue_NET("TriggerSource", (uint)MyCamera.MV_CAM_TRIGGER_SOURCE.MV_TRIGGER_SOURCE_SOFTWARE);
                    if (m_bGrabbing)
                    {
                        bnTriggerExec.Enabled = true;
                    }
                }
                else
                {
                    m_MyCamera.MV_CC_SetEnumValue_NET("TriggerSource", (uint)MyCamera.MV_CAM_TRIGGER_SOURCE.MV_TRIGGER_SOURCE_LINE0);
                }
                cbSoftTrigger.Enabled = true;
            }
        }

        // 软触发相关功能
        private void btn_Trigger_Click(object sender, EventArgs e)
        {
            int nRet = m_MyCamera.MV_CC_SetCommandValue_NET("TriggerSoftware");
            if (MyCamera.MV_OK != nRet)
            {
                ShowErrorMsg("Trigger Software Fail!", nRet);
            }
            int nRet2 = m_MyCamera2.MV_CC_SetCommandValue_NET("TriggerSoftware");
            if (MyCamera.MV_OK != nRet2)
            {
                ShowErrorMsg("Trigger Software Fail!", nRet2);
            }
        }

        private void SoftTrigger()
        {
            while (IsTrigger)
            {
                int nRet = m_MyCamera.MV_CC_SetCommandValue_NET("TriggerSoftware");
                if (MyCamera.MV_OK != nRet)
                {
                    ShowErrorMsg("Trigger Software Fail!", nRet);
                }
                int nRet2 = m_MyCamera2.MV_CC_SetCommandValue_NET("TriggerSoftware");
                if (MyCamera.MV_OK != nRet2)
                {
                    ShowErrorMsg("Trigger Software Fail!", nRet2);
                }

                Thread.Sleep(500);
            }
        }

        // UI更新相关方法
        private void UpdateTextBox(string text)
        {
            if (txt_Test.InvokeRequired)
            {
                txt_Test.Invoke(new Action<string>(UpdateTextBox), text);
            }
            else
            {
                txt_Test.AppendText(text + Environment.NewLine);
                txt_Test.SelectionStart = txt_Test.Text.Length;
                txt_Test.ScrollToCaret();
            }
        }

        private void UpdateTextBox2(string text)
        {
            if (txt_Test2.InvokeRequired)
            {
                txt_Test2.Invoke(new Action<string>(UpdateTextBox2), text);
            }
            else
            {
                txt_Test2.AppendText(text + Environment.NewLine);
                txt_Test2.SelectionStart = txt_Test2.Text.Length;
                txt_Test2.ScrollToCaret();
            }
        }

        private void UpdateTextBox3(string text)
        {
            if (txt_Test3.InvokeRequired)
            {
                txt_Test3.Invoke(new Action<string>(UpdateTextBox3), text);
            }
            else
            {
                txt_Test3.AppendText(text + Environment.NewLine);
                txt_Test3.SelectionStart = txt_Test3.Text.Length;
                txt_Test3.ScrollToCaret();
            }
        }

        // 资源释放
        protected override void OnFormClosing(FormClosingEventArgs e)
        {
            base.OnFormClosing(e);

            // 释放OpenCV相关资源
            cameraMatrix?.Dispose();
            distCoeffs?.Dispose();

            foreach (var rvec in rvecCache.Values)
                rvec?.Dispose();
            foreach (var tvec in tvecCache.Values)
                tvec?.Dispose();

            rvecCache.Clear();
            tvecCache.Clear();

            // 关闭相机
            if (m_MyCamera != null)
            {
                m_MyCamera.MV_CC_CloseDevice_NET();
                m_MyCamera.MV_CC_DestroyDevice_NET();
            }

            if (m_MyCamera2 != null)
            {
                m_MyCamera2.MV_CC_CloseDevice_NET();
                m_MyCamera2.MV_CC_DestroyDevice_NET();
            }
        }
        // 图像处理标志位相关
        private void cbImageProcess_CheckedChanged(object sender, EventArgs e)
        {
            IsImageProceee = cbImageProcess.Checked;
        }

        private void cbImageProcess2_CheckedChanged(object sender, EventArgs e)
        {
            IsImageProceee2 = cbImageProcess2.Checked;
        }

        // 软触发相关
        private void bnTriggerExec_Click(object sender, EventArgs e)
        {
            int nRet = m_MyCamera.MV_CC_SetCommandValue_NET("TriggerSoftware");
            if (MyCamera.MV_OK != nRet)
            {
                ShowErrorMsg("触发软件失败!", nRet);
            }
        }

        private void bnTriggerExec2_Click(object sender, EventArgs e)
        {
            int nRet = m_MyCamera2.MV_CC_SetCommandValue_NET("TriggerSoftware");
            if (MyCamera.MV_OK != nRet)
            {
                ShowErrorMsg("触发软件失败!", nRet);
            }
        }

        // 软触发选项变更
        private void cbSoftTrigger_CheckedChanged(object sender, EventArgs e)
        {
            if (cbSoftTrigger.Checked)
            {
                m_MyCamera.MV_CC_SetEnumValue_NET("TriggerSource", (uint)MyCamera.MV_CAM_TRIGGER_SOURCE.MV_TRIGGER_SOURCE_SOFTWARE);
                if (m_bGrabbing && bnTriggerMode.Checked)
                {
                    bnTriggerExec.Enabled = true;
                    btn_Trigger.Enabled = true;
                    button1.Enabled = true;
                    button2.Enabled = true;
                }
            }
            else
            {
                m_MyCamera.MV_CC_SetEnumValue_NET("TriggerSource", (uint)MyCamera.MV_CAM_TRIGGER_SOURCE.MV_TRIGGER_SOURCE_LINE0);
                bnTriggerExec.Enabled = false;
                btn_Trigger.Enabled = false;
                button1.Enabled = false;
                button2.Enabled = false;
            }
        }

        private void cbSoftTrigger2_CheckedChanged(object sender, EventArgs e)
        {
            if (cbSoftTrigger2.Checked)
            {
                m_MyCamera2.MV_CC_SetEnumValue_NET("TriggerSource", (uint)MyCamera.MV_CAM_TRIGGER_SOURCE.MV_TRIGGER_SOURCE_SOFTWARE);
                if (m_bGrabbing2 && bnTriggerMode2.Checked)
                {
                    bnTriggerExec2.Enabled = true;
                }
            }
            else
            {
                m_MyCamera2.MV_CC_SetEnumValue_NET("TriggerSource", (uint)MyCamera.MV_CAM_TRIGGER_SOURCE.MV_TRIGGER_SOURCE_LINE0);
                bnTriggerExec2.Enabled = false;
            }
        }

        // 触发模式变更
        private void bnTriggerMode2_CheckedChanged(object sender, EventArgs e)
        {
            if (bnTriggerMode2.Checked)
            {
                m_MyCamera2.MV_CC_SetEnumValue_NET("TriggerMode", (uint)MyCamera.MV_CAM_TRIGGER_MODE.MV_TRIGGER_MODE_ON);
                cbSoftTrigger2.Enabled = true;
                if (cbSoftTrigger2.Checked)
                {
                    m_MyCamera2.MV_CC_SetEnumValue_NET("TriggerSource", (uint)MyCamera.MV_CAM_TRIGGER_SOURCE.MV_TRIGGER_SOURCE_SOFTWARE);
                    if (m_bGrabbing2)
                    {
                        bnTriggerExec2.Enabled = true;
                    }
                }
            }
        }

        // 连续模式变更
        private void bnContinuesMode2_CheckedChanged(object sender, EventArgs e)
        {
            if (bnContinuesMode2.Checked)
            {
                m_MyCamera2.MV_CC_SetEnumValue_NET("TriggerMode", (uint)MyCamera.MV_CAM_TRIGGER_MODE.MV_TRIGGER_MODE_OFF);
                cbSoftTrigger2.Enabled = false;
                bnTriggerExec2.Enabled = false;
            }
        }

        // 文本框相关
        private void txt_Test_TextChanged(object sender, EventArgs e)
        {
        }

        private void txt_Test2_TextChanged(object sender, EventArgs e)
        {
        }

        // 按钮事件
        private void btn_Tset_Click(object sender, EventArgs e)
        {
            // 测试按钮功能实现  
        }

        private void button1_Click(object sender, EventArgs e)
        {
            // 开启持续软触发
            IsTrigger = true;
            TriggerThread = new Thread(SoftTrigger);
            TriggerThread.Start();
        }

        private void button2_Click(object sender, EventArgs e)
        {
            // 关闭持续软触发
            IsTrigger = false;
            TriggerThread.Join();
        }
    } // class Form1 结束

    // CubeDetector类定义
    public class CubeDetector
    {
        private readonly Dictionary<int, Point3f> markerToCubeCenter;
        private readonly float cubeSize = 35.0f;
        private readonly float markerSize = 30.0f;
        private readonly Dictionary<int, Vec3d> markerRotations;

        public CubeDetector()
        {
            markerToCubeCenter = new Dictionary<int, Point3f>
            {
                { 1, new Point3f(cubeSize/2, 0, 0) },     // 前面
                { 3, new Point3f(-cubeSize/2, 0, 0) },    // 后面
                { 5, new Point3f(0, -cubeSize/2, 0) },    // 左面
                { 7, new Point3f(0, cubeSize/2, 0) },     // 右面
                { 9, new Point3f(0, 0, -cubeSize/2) }     // 下面
            };

            markerRotations = new Dictionary<int, Vec3d>
            {
                { 1, new Vec3d(0, 0, 0) },
                { 3, new Vec3d(0, Math.PI, 0) },
                { 5, new Vec3d(0, -Math.PI/2, 0)},
                { 7, new Vec3d(0, Math.PI/2, 0)},
                { 9, new Vec3d(Math.PI/2, 0, 0)}
            };
        }
    }
} // namespace 结束                                                                                                                                                                                  